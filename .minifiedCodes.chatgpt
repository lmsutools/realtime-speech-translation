<"file: modules\translation.js">export async function translateWithAI(text, context, translationContext) {try {const targetLangCode = document.getElementById('targetLanguage').value;const targetLanguageMapping = { en: "English", es: "Spanish", zh: "Chinese Simplified" };const targetLanguage = targetLanguageMapping[targetLangCode] || "English";// --- Get Translate AI Provider Settings from localStorage ---const selectedProviderId = localStorage.getItem('translateDefaultAiProvider') || 'openai';const providersJson = localStorage.getItem('aiProviders');const translateAiProviders = JSON.parse(providersJson);const selectedProvider = translateAiProviders.find(provider => provider.id === selectedProviderId);if (!selectedProvider) {console.error(`AI Provider with ID "${selectedProviderId}" not found in settings.`);return `AI Provider "${selectedProviderId}" not configured.`;}const apiKey = localStorage.getItem(selectedProvider.apiKeySettingKey);const translateAiModel = localStorage.getItem('translateDefaultAiModel') || selectedProvider.defaultModel;if (!apiKey) {console.error(`${selectedProvider.name} API key is not set. Please set it in settings.`);return `${selectedProvider.name} API key not set.`;}console.log("Using AI Provider:", selectedProvider.name);console.log("Using AI Model:", translateAiModel);// --- Use OpenAI-compatible API call for all providers ---let apiEndpoint = selectedProvider.endpoint;// Override endpoints for providers that may have legacy endpoints in storage:if (selectedProvider.id === 'gemini') {apiEndpoint = "https://generativelanguage.googleapis.com/v1beta/openai/chat/completions";} else if (selectedProvider.id === 'groq') {apiEndpoint = "https://api.groq.com/openai/v1/chat/completions";}const response = await fetch(apiEndpoint, {method: 'POST',headers: {Authorization: `Bearer ${apiKey}`,'Content-Type': 'application/json',},body: JSON.stringify({model: translateAiModel,messages: [{role: 'user',content: `### **Translation Guidelines**:1. **Contextual Continuity**: Use the provided context to predict and translate the next word naturally.2. **Accuracy & Brevity**: Ensure translations are concise and grammatically correct.3. **Preserve English Words**: Maintain words already in English.4. **Names & Locations**: Retain original names and locations.5. **Omit Quotation Marks**: Do not include quotation marks or extra characters.6. **Skip Ambiguous Words**: Skip words if uncertain.7. **No Redundancies**: Avoid repeating already translated words.8. **Avoid Over-translation**: Do not retranslate words already correctly translated.9. **Natural Translation**: Ensure natural phrasing.10. **Speed & Precision**: Prioritize fast, accurate translations.#### **Examples**:- Input: "महात्मा" with context "मेरा नाम" → Output: "is Mahatma"- Input: "profesor" with context "Él es" → Output: "a teacher"- Input: "bonjour" with context "He greeted her saying" → Output: "hello"- Input: "Escuela" with context "Estamos en la" → Output: "school"#### Translate the following text to ${targetLanguage}:- **Input**: Text: "${text}"- Input Context: "${context}"- Translation Context: "${translationContext}"Output:`}],}),});if (!response.ok) {console.error(`Error in translation request: ${response.statusText}`);return `Translation Error: ${response.statusText}`;}const result = await response.json();const translatedText = (result.choices && result.choices[0]?.message?.content)? result.choices[0].message.content.replaceAll('"', '').replaceAll(`'`, ''): '';return translatedText.replace(/<think>.*?<\/think>/gs, '').trim();} catch (error) {console.error('Error during translation:', error.message);return `Translation Error: ${error.message}`;}}</"file: modules\translation.js">

<"file: settings.js">import { populateInputDevices } from './modules/devices.js';import { ipcRenderer } from 'electron';document.addEventListener('DOMContentLoaded', () => {const modelSelect = document.getElementById('model');const inputDeviceSettingsSelect = document.getElementById('inputDeviceSettings');const diarizationSettingsCheckbox = document.getElementById('diarizationSettings');const enableTranslationSettingsCheckbox = document.getElementById('enableTranslationSettings');const deepgramApiKeyInput = document.getElementById('deepgramApiKey');// --- Translate Tab Elements ---const providerListDiv = document.getElementById('providerList');const addProviderButton = document.getElementById('addProviderButton');const providerEditFormDiv = document.getElementById('providerEditForm');const providerNameInput = document.getElementById('providerName');const providerApiKeyInput = document.getElementById('providerApiKey');const providerModelsTextarea = document.getElementById('providerModels');const providerEndpointInput = document.getElementById('providerEndpoint');const saveProviderButton = document.getElementById('saveProviderButton');const cancelProviderButton = document.getElementById('cancelProviderButton');// New elements for default translate provider and model selectionconst translateDefaultAiProviderSelect = document.getElementById('defaultAiProviderSelect'); // Renamedconst translateDefaultAiModelSelect = document.getElementById('defaultAiModelSelect'); // Renamedlet translateAiProviders = []; // Renamed variablelet editingProviderId = null;// --- Helper Functions (No changes) ---function generateUniqueId() {return Date.now().toString(36) + Math.random().toString(36).substring(2, 5);}function getApiKeyStorageKey(providerId) {return `aiProviderApiKey_${providerId}`;}// --- Load and Save Providers (Modified to merge default providers) ---function loadProviders() {// Define the default providers including Gemini and now Groqconst defaultProviders = [{id: 'openai',name: "OpenAI",apiKeySettingKey: getApiKeyStorageKey('openai'),models: ['gpt-3.5-turbo', 'o3-mini-2025-01-31', 'gpt-4o-mini'],defaultModel: 'gpt-3.5-turbo',endpoint: "https://api.openai.com/v1/chat/completions"},{id: 'sambanova',name: "SambaNova AI",apiKeySettingKey: getApiKeyStorageKey('sambanova'),models: ["DeepSeek-R1-Distill-Llama-70B"],defaultModel: "DeepSeek-R1-Distill-Llama-70B",endpoint: "https://api.sambanova.ai/v1/chat/completions"},{id: 'gemini',name: "Google Gemini",apiKeySettingKey: getApiKeyStorageKey('gemini'),models: ["gemini-2.0-flash-001","gemini-2.0-pro-exp-02-05","gemini-2.0-flash-lite-preview-02-05","gemini-2.0-flash-thinking-exp-01-21","gemini-1.5-flash","gemini-1.5-pro"],defaultModel: "gemini-1.5-flash",endpoint: "https://generativelanguage.googleapis.com/v1beta/openai/chat/completions",isGemini: true},{id: 'groq',name: "Groq AI",apiKeySettingKey: getApiKeyStorageKey('groq'),models: ["distil-whisper-large-v3-en","gemma2-9b-it","llama-3.3-70b-versatile","llama-3.1-8b-instant"],defaultModel: "gemma2-9b-it",endpoint: "https://api.groq.com/openai/v1/chat/completions"}];const storedProviders = localStorage.getItem('aiProviders');if (storedProviders) {translateAiProviders = JSON.parse(storedProviders);// Merge default providers that are missing from persistent storagedefaultProviders.forEach(defaultProvider => {if (!translateAiProviders.some(provider => provider.id === defaultProvider.id)) {translateAiProviders.push(defaultProvider);}});} else {translateAiProviders = defaultProviders;}localStorage.setItem('aiProviders', JSON.stringify(translateAiProviders));}function saveProviders() {localStorage.setItem('aiProviders', JSON.stringify(translateAiProviders)); // Renamed variable}// --- Populate UI Dropdowns (Modified variables names) ---function populateProviderList() {providerListDiv.innerHTML = '';translateAiProviders.forEach(provider => { // Renamed variableconst providerItem = document.createElement('div');providerItem.classList.add('provider-item');providerItem.innerHTML = `<span>${provider.name}</span><div class="provider-actions"><button class="edit-provider" data-id="${provider.id}">Edit</button><button class="delete-provider" data-id="${provider.id}">Delete</button></div>`;providerListDiv.appendChild(providerItem);});}function populateDefaultAiProvidersDropdown() {translateDefaultAiProviderSelect.innerHTML = ''; // Renamed variabletranslateAiProviders.forEach(provider => {  // Renamed variableconst option = document.createElement('option');option.value = provider.id;option.text = provider.name;translateDefaultAiProviderSelect.appendChild(option); // Renamed variable});}function updateDefaultAiModelsDropdown(selectedProviderId) {translateDefaultAiModelSelect.innerHTML = ''; // Renamed variableconst provider = translateAiProviders.find(p => p.id === selectedProviderId); // Renamed variableif (provider && provider.models) {provider.models.forEach(modelName => {const modelOption = document.createElement('option');modelOption.value = modelName;modelOption.text = modelName;translateDefaultAiModelSelect.appendChild(modelOption); // Renamed variable});translateDefaultAiModelSelect.value = localStorage.getItem('translateDefaultAiModel') || provider.defaultModel || provider.models[0]; // Renamed variable}}// --- Handle Provider Editing Form (Modified variables names) ---function showProviderEditForm(provider = null) {editingProviderId = provider ? provider.id : null;providerEditFormDiv.style.display = 'block';if (provider) {providerNameInput.value = provider.name;providerApiKeyInput.value = localStorage.getItem(provider.apiKeySettingKey) || '';providerModelsTextarea.value = provider.models.join(', ');providerEndpointInput.value = provider.endpoint;translateDefaultAiModelSelect.innerHTML = ''; //Clear model options when editingprovider.models.forEach(modelName => {const modelOption = document.createElement('option');modelOption.value = modelName;modelOption.text = modelName;translateDefaultAiModelSelect.appendChild(modelOption); // Renamed variable});translateDefaultAiModelSelect.value = provider.defaultModel || provider.models[0]; // Set default model for edit form} else {providerNameInput.value = '';providerApiKeyInput.value = '';providerModelsTextarea.value = '';providerEndpointInput.value = '';translateDefaultAiModelSelect.innerHTML = ''; // Clear model options when adding new}}function hideProviderEditForm() {providerEditFormDiv.style.display = 'none';editingProviderId = null;}function saveCurrentProvider() {const providerData = {id: editingProviderId || generateUniqueId(),name: providerNameInput.value,models: providerModelsTextarea.value.split(',').map(m => m.trim()).filter(m => m),endpoint: providerEndpointInput.value,apiKeySettingKey: getApiKeyStorageKey(editingProviderId || generateUniqueId()),defaultModel: translateDefaultAiModelSelect.value};localStorage.setItem(providerData.apiKeySettingKey, providerApiKeyInput.value);if (editingProviderId) {const index = translateAiProviders.findIndex(p => p.id === editingProviderId); // Renamed variableif (index !== -1) {translateAiProviders[index] = providerData; // Renamed variable}} else {translateAiProviders.push(providerData); // Renamed variable}saveProviders();populateProviderList();hideProviderEditForm();populateDefaultAiProvidersDropdown(); // Refresh default provider dropdown after provider changetranslateDefaultAiProviderSelect.value = providerData.id; // Optionally set default to the new/edited providerupdateDefaultAiModelsDropdown(providerData.id); // Update default model dropdown too}function deleteProvider(providerId) {translateAiProviders = translateAiProviders.filter(provider => provider.id !== providerId); // Renamed variablesaveProviders();populateProviderList();populateDefaultAiProvidersDropdown();}// Load settings (Speech Tab - existing functionality) (No changes)function loadSettings() {modelSelect.value = localStorage.getItem('model') || 'nova-2';populateInputDevices('inputDeviceSettings');const savedDevice = localStorage.getItem('defaultInputDevice');if (savedDevice) {inputDeviceSettingsSelect.value = savedDevice;}diarizationSettingsCheckbox.checked = localStorage.getItem('diarizationEnabled') === 'true';enableTranslationSettingsCheckbox.checked = localStorage.getItem('enableTranslation') === 'true';deepgramApiKeyInput.value = localStorage.getItem('deepgramApiKey') || '';// Load Translate Tab Settings - load defaults - call last for dependency order (Modified variables names)loadDefaultAiSettings();}function loadDefaultAiSettings(){populateDefaultAiProvidersDropdown(); // Populate default AI provider dropdown - FIRST, for provider selectconst savedDefaultProvider = localStorage.getItem('translateDefaultAiProvider') || 'openai'; // Default to openaitranslateDefaultAiProviderSelect.value = savedDefaultProvider; // Set selected valueupdateDefaultAiModelsDropdown(savedDefaultProvider); // Populate default AI model dropdown based on providertranslateDefaultAiModelSelect.value = localStorage.getItem('translateDefaultAiModel') || ''; // Load default AI Model}// Save settings (Speech Tab - existing functionality) (No changes)function saveSettings() {if (modelSelect) {localStorage.setItem('model', modelSelect.value);}if (inputDeviceSettingsSelect) {localStorage.setItem('defaultInputDevice', inputDeviceSettingsSelect.value);}if (diarizationSettingsCheckbox) {localStorage.setItem('diarizationEnabled', diarizationSettingsCheckbox.checked);}if (enableTranslationSettingsCheckbox) {localStorage.setItem('enableTranslation', enableTranslationSettingsCheckbox.checked);ipcRenderer.send('translation-setting-changed', enableTranslationSettingsCheckbox.checked);}if (deepgramApiKeyInput) {localStorage.setItem('deepgramApiKey', deepgramApiKeyInput.value);}saveDefaultAiSettings(); // Save default AI settings too - call last}function saveDefaultAiSettings(){if (translateDefaultAiProviderSelect) {localStorage.setItem('translateDefaultAiProvider', translateDefaultAiProviderSelect.value);}if (translateDefaultAiModelSelect) {localStorage.setItem('translateDefaultAiModel', translateDefaultAiModelSelect.value);}}// --- Event Listeners ---// Speech Tab Event Listeners (existing)modelSelect.addEventListener('change', saveSettings);inputDeviceSettingsSelect.addEventListener('change', saveSettings);diarizationSettingsCheckbox.addEventListener('change', saveSettings);enableTranslationSettingsCheckbox.addEventListener('change', saveSettings);deepgramApiKeyInput.addEventListener('input', saveSettings);// --- Translate Tab Event Listeners ---addProviderButton.addEventListener('click', () => showProviderEditForm(null));cancelProviderButton.addEventListener('click', hideProviderEditForm);saveProviderButton.addEventListener('click', saveCurrentProvider);providerListDiv.addEventListener('click', (event) => {if (event.target.classList.contains('edit-provider')) {const providerId = event.target.dataset.id;const providerToEdit = translateAiProviders.find(p => p.id === providerId); // Renamed variableif (providerToEdit) {showProviderEditForm(providerToEdit);}} else if (event.target.classList.contains('delete-provider')) {const providerId = event.target.dataset.id;deleteProvider(providerId);}});// Event listeners for default AI provider and model selectiontranslateDefaultAiProviderSelect.addEventListener('change', (event) => {const selectedProviderId = event.target.value; // Renamed variableupdateDefaultAiModelsDropdown(selectedProviderId);saveSettings();});translateDefaultAiModelSelect.addEventListener('change', saveSettings);// --- Initial Setup ---loadSettings();loadProviders();populateProviderList();loadDefaultAiSettings();});</"file: settings.js">

<"file: modules\recording.js">import { translateWithAI } from './translation.js';import { pasteText } from './utils.js';import { isInputDeviceAvailable } from './devices.js';let mediaRecorder;let socket;let transcriptions = [];let translations = [];export async function startRecording() {try {// Get ALL settings from localStorageconst selectedModel = localStorage.getItem('model') || 'nova-2';const selectedLanguage = localStorage.getItem('sourceLanguage');const targetLanguage = localStorage.getItem('targetLanguage');const diarizationEnabled = localStorage.getItem('diarizationEnabled') === 'true';const translationEnabled = localStorage.getItem('enableTranslation') === 'true';const selectedDeviceId = localStorage.getItem('defaultInputDevice');const deepgramKey = localStorage.getItem('deepgramApiKey');// --- Get AI Provider Settings from localStorage using the unified keys ---const defaultAiProviderId = localStorage.getItem('translateDefaultAiProvider') || 'openai';const providersJson = localStorage.getItem('aiProviders');const aiProviders = JSON.parse(providersJson);const defaultAiProvider = aiProviders.find(provider => provider.id === defaultAiProviderId);const defaultAiModel = localStorage.getItem('translateDefaultAiModel') || defaultAiProvider.defaultModel;if (!selectedLanguage) {console.error("No source language selected.");return;}if (!targetLanguage) {console.error("No target language selected.");return;}if (!deepgramKey) {console.error("Deepgram API key is not set. Please set it in settings.");document.getElementById('source-text').textContent = 'Deepgram API key is not set. Please set it in settings.';return;}if (selectedDeviceId && !(await isInputDeviceAvailable(selectedDeviceId))) {console.warn(`Previously selected input device (${selectedDeviceId}) is not available.`);localStorage.removeItem('defaultInputDevice');document.getElementById('source-text').textContent = 'Previously selected input device is not available. Using default device.';}let stream;if (selectedDeviceId) {stream = await navigator.mediaDevices.getUserMedia({ audio: { deviceId: selectedDeviceId } });} else {console.warn("Using default input device.");stream = await navigator.mediaDevices.getUserMedia({ audio: true });document.getElementById('source-text').textContent = 'Using default input device.';}mediaRecorder = new MediaRecorder(stream, { mimeType: 'audio/webm' });let queryParams = `?model=${selectedModel}&language=${selectedLanguage}&punctuate=true`;if (diarizationEnabled) {queryParams += `&diarize=true`;}socket = new WebSocket(`wss://api.deepgram.com/v1/listen${queryParams}`, ['token', deepgramKey]);socket.onmessage = async (msg) => {const parsed = JSON.parse(msg.data || '{}');const transcript = parsed?.channel?.alternatives[0]?.transcript;if (transcript) {console.log(transcript);if (document.getElementById('source-text').textContent === 'Previously selected input device is not available. Using default device.' ||document.getElementById('source-text').textContent === 'Using default input device.' ||document.getElementById('source-text').textContent === 'Deepgram API key is not set. Please set it in settings.') {document.getElementById('source-text').textContent = '';}document.getElementById('source-text').textContent += ` ${transcript}`;transcriptions.push(transcript);if (transcriptions.length > 10) {transcriptions.shift();}const pasteOption = document.getElementById('pasteOption').value;if (pasteOption === 'source') {pasteText(transcript);}if (translationEnabled) {// Pass the transcript to translateWithAI (which handles provider selection)const translation = await translateWithAI(transcript, transcriptions.join(' '), translations.join(' '));translations.push(translation);if (translations.length > 10) {translations.shift();}console.log('translation', translation);document.getElementById('translated-text').textContent += ` ${translation}`;if (pasteOption === 'translated') {pasteText(translation);}}}};socket.onerror = (error) => {console.error('WebSocket error:', error);};socket.onclose = () => {console.log('WebSocket connection closed');};socket.onopen = () => {mediaRecorder.start(50);console.log('MediaRecorder started');// Debug: Log the selected AI Provider and Model for verification.console.log("Using AI Provider on Start:", defaultAiProvider.name);console.log("Using AI Model on Start:", defaultAiModel);};mediaRecorder.ondataavailable = (event) => {if (event.data.size > 0 && socket?.readyState === WebSocket.OPEN) {socket.send(event.data);}};document.getElementById('start').style.display = 'none';document.getElementById('stop').style.display = 'block';} catch (error) {console.error('Error starting recording:', error);}}export function stopRecording() {if (mediaRecorder && mediaRecorder.state !== 'inactive') {mediaRecorder.stop();console.log('Recording stopped');}if (socket) {socket.close();socket = null;}document.getElementById('start').style.display = 'block';document.getElementById('stop').style.display = 'none';}</"file: modules\recording.js">

<"file: settings.html"><!DOCTYPE html><html><head><title>Settings</title><link rel="stylesheet" href="styles.css"><style>body {
            padding: 20px;
        }

        /* Tabs Styles (No changes needed) */
        .tab-buttons {
            display: flex;
            margin-bottom: 10px;
        }

        .tab-button {
            padding: 8px 15px;
            border: 1px solid #ccc;
            border-bottom: none;
            background-color: #f0f0f0;
            cursor: pointer;
            border-radius: 5px 5px 0 0;
        }

        .tab-button.active {
            background-color: #ddd;
        }

        .tab-content {
            border: 1px solid #ccc;
            padding: 15px;
            border-radius: 0 0 5px 5px;
        }

        .tab-pane {
            display: none;
        }

        .tab-pane.active {
            display: block;
        }

        .setting-group {
            margin-bottom: 15px;
        }
        label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }
        select, input[type="checkbox"], input[type="text"], textarea { /* Added textarea */
            width: 100%;
            padding: 8px;
            border-radius: 4px;
            border: 1px solid #ccc;
            box-sizing: border-box;
        }
        textarea {
            font-family: monospace; /* Monospace for model list */
            height: 100px; /* Adjust as needed */
        }


        .provider-settings {
            border: 1px solid #eee;
            padding: 10px;
            margin-bottom: 10px;
            border-radius: 5px;
            background-color: #fafafa;
        }
        .provider-settings h3 {
            margin-top: 0;
            margin-bottom: 10px;
            color: #555;
        }

        /* Styles for Provider List and Buttons */
        #providerList {
            margin-bottom: 15px;
        }
        .provider-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 8px;
            border-bottom: 1px solid #eee;
        }
        .provider-item:last-child {
            border-bottom: none;
        }
        .provider-actions button {
            margin-left: 5px;
            padding: 5px 10px;
            cursor: pointer;
        }
        #addProviderButton, #saveProviderButton, #cancelProviderButton {
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            padding: 8px 15px;
            margin-top: 10px;
        }
        #cancelProviderButton, .provider-actions .delete-provider {
             background-color: #f44336;
        }</style></head><body><h1>Settings</h1><div class="tab-buttons"><button class="tab-button active" data-tab="speech">Speech</button> <button class="tab-button" data-tab="translate">Translate</button></div><div class="tab-content"><div id="speech" class="tab-pane active"><div class="setting-group"><label for="deepgramApiKey">Deepgram API Key:</label> <input type="text" id="deepgramApiKey" placeholder="Enter your Deepgram API Key"></div><div class="setting-group"><label for="model">Model:</label> <select id="model"><option value="nova-2">nova-2</option><option value="nova-3">nova-3</option></select></div><div class="setting-group"><label for="inputDeviceSettings">Input Device:</label> <select id="inputDeviceSettings"></select></div><div class="setting-group"><label for="diarizationSettings">Enable Diarization:</label> <input type="checkbox" id="diarizationSettings"></div><div class="setting-group"><label for="enableTranslationSettings">Enable Translation:</label> <input type="checkbox" id="enableTranslationSettings" checked="checked"></div></div><div id="translate" class="tab-pane"><div class="setting-group"><label for="defaultAiProviderSelect">Default AI Provider:</label> <select id="defaultAiProviderSelect"></select></div><div class="setting-group"><label for="defaultAiModelSelect">Default Model:</label> <select id="defaultAiModelSelect"></select></div><div id="providerList"></div><button id="addProviderButton">Add Provider</button><div id="providerEditForm" class="provider-settings" style="display:none;"><h3>Provider Settings</h3><div class="setting-group"><label for="providerName">Provider Name:</label> <input type="text" id="providerName" placeholder="Provider Name"></div><div class="setting-group"><label for="providerApiKey">API Key:</label> <input type="text" id="providerApiKey" placeholder="Enter your API Key"></div><div class="setting-group"><label for="providerModels">Models (comma-separated):</label> <textarea id="providerModels" placeholder="Enter models, comma-separated"></textarea></div><div class="setting-group"><label for="providerEndpoint">API Endpoint:</label> <input type="text" id="providerEndpoint" placeholder="API Endpoint"></div><button id="saveProviderButton">Save Provider</button> <button id="cancelProviderButton">Cancel</button></div></div></div><script src="dist/settings.js"></script><script>// Tab switching script (No changes needed)
        document.addEventListener('DOMContentLoaded', () => {
            const tabButtons = document.querySelectorAll('.tab-button');
            const tabPanes = document.querySelectorAll('.tab-pane');

            tabButtons.forEach(button => {
                button.addEventListener('click', () => {
                    const tabName = button.dataset.tab;

                    tabButtons.forEach(btn => btn.classList.remove('active'));
                    tabPanes.forEach(pane => pane.classList.remove('active'));

                    button.classList.add('active');
                    document.getElementById(tabName).classList.add('active');
                });
            });
        });</script></body></html></"file: settings.html">

<"file: package.json">{"name": "realtime-translator","version": "1.0.0","description": "","main": "main.js","scripts": {"build": "webpack --mode development","start": "npm run build && electron ."},"keywords": [],"author": "","license": "ISC","dependencies": {"@deepgram/sdk": "^3.8.0","@electron/remote": "^2.1.2","@nut-tree-fork/nut-js": "^4.2.4","electron": "^32.1.2"},"devDependencies": {"webpack": "^5.97.1","webpack-cli": "^6.0.1"}}</"file: package.json">

<"file: renderer.js">import { initializeUI, updateSourceLanguageDropdown } from './modules/ui.js';import { startRecording, stopRecording } from './modules/recording.js';import { ipcRenderer } from 'electron';//Remove dotenv import//dotenv.config();initializeUI();document.getElementById('start').addEventListener('click', startRecording);document.getElementById('stop').addEventListener('click', stopRecording);document.getElementById('typingAppButton').addEventListener('click', () => {console.log('Typing App button clicked');});document.getElementById('settingsIcon').addEventListener('click', () => {ipcRenderer.send('open-settings');});ipcRenderer.on('update-translation-ui', (event, enableTranslation) => {import('./modules/ui.js').then(ui => {ui.updateTranslationUI(enableTranslation);});});ipcRenderer.on('update-source-languages', (event, selectedModel) => {updateSourceLanguageDropdown(selectedModel);});</"file: renderer.js">

<"file: modules\devices.js">export async function populateInputDevices(selectElementId) {try {const stream = await navigator.mediaDevices.getUserMedia({ audio: true });const devices = await navigator.mediaDevices.enumerateDevices();const audioInputDevices = devices.filter(device => device.kind === 'audioinput');const inputSelect = document.getElementById(selectElementId);if (!inputSelect) {console.error(`Select element with ID '${selectElementId}' not found.`);return;}inputSelect.innerHTML = ''; // Clear optionsconst savedDeviceId = localStorage.getItem('defaultInputDevice'); // Get saved ID hereaudioInputDevices.forEach(device => {const option = document.createElement('option');option.value = device.deviceId;option.text = device.label || `Microphone ${inputSelect.length + 1}`;if (savedDeviceId && device.deviceId === savedDeviceId) {option.selected = true;console.log(`Device ${device.label} marked as selected because it matches saved ID: ${savedDeviceId}`);}inputSelect.appendChild(option);});stream.getTracks().forEach(track => track.stop());} catch (error) {console.error('Error populating input devices:', error);}}// --- Explicitly export isInputDeviceAvailable ---export async function isInputDeviceAvailable(deviceId) {try {const devices = await navigator.mediaDevices.enumerateDevices();const audioInputDevices = devices.filter(device => device.kind === 'audioinput');return audioInputDevices.some(device => device.deviceId === deviceId);} catch (error) {console.error('Error checking device availability:', error);return false;}}</"file: modules\devices.js">

<"file: modules\ui.js">import { populateInputDevices } from './devices.js';// Function to update the translation UIexport function updateTranslationUI(enableTranslation) {const translationContainer = document.getElementById('translated-text').parentNode;const targetLanguageSelect = document.getElementById('targetLanguage');const arrowSpan = document.querySelector('.arrow');const displayValue = enableTranslation ? 'block' : 'none';translationContainer.style.display = displayValue;targetLanguageSelect.style.display = displayValue;arrowSpan.style.display = displayValue;}// New function to update ONLY the source language dropdownexport function updateSourceLanguageDropdown(model) {const sourceLanguageSelect = document.getElementById('sourceLanguage');updateLanguageOptions(sourceLanguageSelect, model); // Populate options based on model// Set default source language based on modelif (model === 'nova-3') {sourceLanguageSelect.value = 'en';localStorage.setItem('sourceLanguage', 'en'); // Update localStorage too} else if (model === 'nova-2') {sourceLanguageSelect.value = 'multi';localStorage.setItem('sourceLanguage', 'multi'); //Update local storage too}}function updateLanguageOptions(languageSelect, model) {languageSelect.innerHTML = '';const options = (model === 'nova-2') ? [{ value: 'en-US', text: 'English (US)' },{ value: 'es-ES', text: 'Spanish (Spain)' },{ value: 'zh', text: 'Chinese Mandarin Simplified' },{ value: 'multi', text: 'Multi (English + Spanish)' }] : [{ value: 'en', text: 'English' }];options.forEach(opt => {const optionElement = document.createElement('option');optionElement.value = opt.value;optionElement.text = opt.text;languageSelect.appendChild(optionElement);});}function applySettingsToUI() {const enableTranslation = localStorage.getItem('enableTranslation') === 'true';const model = localStorage.getItem('model') || 'nova-2';// --- Source Language ---const sourceLanguageSelect = document.getElementById('sourceLanguage');updateLanguageOptions(sourceLanguageSelect, model);sourceLanguageSelect.value = localStorage.getItem('sourceLanguage') || (model === 'nova-2' ? 'multi' : 'en');localStorage.setItem('sourceLanguage', sourceLanguageSelect.value);// --- Target Language ---const targetLanguageSelect = document.getElementById('targetLanguage');const targetLanguageOptions = [{ value: 'en', text: 'English' },{ value: 'es', text: 'Spanish' },{ value: 'zh', text: 'Chinese Simplified' }];targetLanguageOptions.forEach(opt => {const optionElement = document.createElement('option');optionElement.value = opt.value;optionElement.text = opt.text;targetLanguageSelect.appendChild(optionElement);});targetLanguageSelect.value = localStorage.getItem('targetLanguage') || 'en';localStorage.setItem('targetLanguage', targetLanguageSelect.value);// --- Translation Toggle ---updateTranslationUI(enableTranslation);}export function initializeUI() {document.addEventListener('DOMContentLoaded', () => {// Set up Reset button.document.getElementById('reset').addEventListener('click', () => {document.getElementById('source-text').textContent = '';document.getElementById('translated-text').textContent = '';});applySettingsToUI();});}</"file: modules\ui.js">

<"file: main.js">const { app, BrowserWindow, ipcMain, clipboard } = require('electron');let mainWindow;let settingsWindow;function createWindow() {mainWindow = new BrowserWindow({width: 800,height: 600,webPreferences: {nodeIntegration: true,contextIsolation: false,enableRemoteModule: true,},autoHideMenuBar: true,});mainWindow.loadFile('index.html');}function createSettingsWindow() {if (settingsWindow) {settingsWindow.focus();return;}settingsWindow = new BrowserWindow({width: 400,height: 500,webPreferences: {nodeIntegration: true,contextIsolation: false,},autoHideMenuBar: true,});settingsWindow.loadFile('settings.html');settingsWindow.on('closed', () => {settingsWindow = null;});}app.whenReady().then(createWindow);app.on('window-all-closed', () => {if (process.platform !== 'darwin') app.quit();});app.on('activate', () => {if (BrowserWindow.getAllWindows().length === 0) createWindow();});ipcMain.handle('paste-text', async (event, text) => {clipboard.writeText(text);try {const { keyboard, Key } = await import('@nut-tree-fork/nut-js');keyboard.config.autoDelayMs = 0;const modifierKey = process.platform === 'darwin' ? Key.LeftSuper : Key.LeftControl;await keyboard.pressKey(modifierKey);await keyboard.pressKey(Key.V);await keyboard.releaseKey(Key.V);await keyboard.releaseKey(modifierKey);} catch (error) {console.error('Error simulating paste:', error);}return true;});ipcMain.on('open-settings', () => {createSettingsWindow();});ipcMain.on('translation-setting-changed', (event, enableTranslation) => {if (mainWindow) {mainWindow.webContents.send('update-translation-ui', enableTranslation);}});// Listen for model setting changes from settings windowipcMain.on('model-setting-changed', (event, selectedModel) => {if (mainWindow) {mainWindow.webContents.send('update-source-languages', selectedModel);}});</"file: main.js">

<"file: index.html"><!DOCTYPE html><html><head><title>Realtime Translator</title><link rel="stylesheet" href="styles.css"></head><body><div class="top-bar"><div class="controls"><select id="pasteOption"><option value="none">-Paste-</option><option value="source">Source</option><option value="translated">Translated</option></select> <button id="typingAppButton">Typing App</button> <select id="sourceLanguage"></select> <span class="arrow">&rarr;</span> <select id="targetLanguage"></select></div><div id="settingsIcon">&#9881;</div></div><div class="main-content"><div class="pane source-pane"><p id="source-text" class="text-display"></p></div><div class="pane translated-pane"><p id="translated-text" class="text-display"></p></div></div><div class="bottom-bar"><button id="start" class="mic-button">Start</button> <button id="stop" class="mic-button">Stop</button> <button id="reset">Reset</button></div><script src="dist/bundle.js"></script></body></html></"file: index.html">

<"file: modules\utils.js">import { ipcRenderer } from 'electron';export async function pasteText(text) {try {await ipcRenderer.invoke('paste-text', text);} catch (error) {console.error('Error simulating auto paste:', error);}}</"file: modules\utils.js">

<"file: devices.js">export async function populateInputDevices(selectElementId) {try {const stream = await navigator.mediaDevices.getUserMedia({ audio: true });const devices = await navigator.mediaDevices.enumerateDevices();const audioInputDevices = devices.filter(device => device.kind === 'audioinput');const inputSelect = document.getElementById(selectElementId);if (!inputSelect) {console.error(`Select element with ID '${selectElementId}' not found.`);return;}inputSelect.innerHTML = '';audioInputDevices.forEach(device => {const option = document.createElement('option');option.value = device.deviceId;option.text = device.label || `Microphone ${inputSelect.length + 1}`;inputSelect.appendChild(option);});stream.getTracks().forEach(track => track.stop());} catch (error) {console.error('Error populating input devices:', error);}}//This is not used anymore by recording, but kept if needed.export async function getCorrectInputDevice() {try {const inputSelect = document.getElementById('inputDevice');//Check for savedconst defaultInputDevice = localStorage.getItem('defaultInputDevice')const deviceId =  defaultInputDevice? defaultInputDevice : inputSelect.value;console.log('Using input device:', deviceId);const stream = await navigator.mediaDevices.getUserMedia({ audio: { deviceId: deviceId } });return stream;} catch (error) {console.error('Error selecting input device:', error);}}</"file: devices.js">

<"file: webpack.config.js">const path = require('path');module.exports = {mode: 'development',target: 'electron-renderer',entry: {bundle: './renderer.js', // Main entry pointsettings: './settings.js' // Settings entry point},output: {filename: '[name].js', // Output: bundle.js, settings.jspath: path.resolve(__dirname, 'dist'),},};</"file: webpack.config.js">

<"file: styles.css">body {font-family: Arial, sans-serif;background-color: #f0f0f0;margin: 0;padding: 0;display: flex;flex-direction: column;height: 100vh;}.top-bar {display: flex;justify-content: space-between;align-items: center;padding: 10px;background-color: #eee;border-bottom: 1px solid #ddd;}.controls {display: flex;align-items: center;gap: 10px; /* Spacing between controls */}.controls select, .controls button {padding: 8px;border-radius: 4px;border: 1px solid #ccc;}#settingsIcon {font-size: 24px;cursor: pointer;}.main-content {display: grid;grid-template-columns: 1fr 1fr;flex-grow: 1; /* Take up remaining space */}.pane {padding: 20px;border: 1px solid #ddd;overflow-y: auto; /* Scrollable content */}.source-pane {border-right: none; /* Remove the border between panes */}.text-display {min-height: 50px; /* Prevent jumping */white-space: pre-wrap; /* Preserve line breaks and spaces */}.bottom-bar{padding: 20px;display: flex;justify-content: center;gap: 10px;flex-direction: column;align-items: center;}.mic-button {width: auto;  /*  width */padding: 10px 20px;border-radius: 5px;border: 1px solid #ccc;font-size: 16px;background-color: #4CAF50;color: white;cursor: pointer;}#stop {display: none;background-color: #f44336;}.bottom-bar button{background-color: #4CAF50;color: white;border: none;cursor: pointer;transition: background-color 0.3s;margin-top: 10px;padding: 10px;border-radius: 5px;border: 1px solid #ccc;font-size: 16px;}#reset{background-color: #2196F3;}.bottom-bar div, .bottom-bar label{width: auto;}</"file: styles.css">

<"file: error.txt">Error minifying .gitignore: Unsupported file format
Error minifying .env: Unsupported file format</"file: error.txt">

